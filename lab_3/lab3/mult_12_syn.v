// megafunction wizard: %LPM_MULT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: altsquare 

// ============================================================
// File Name: mult_12.v
// Megafunction Name(s):
// 			altsquare
//
// Simulation Library Files(s):
// 			
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 13.1.3 Build 178 02/12/2014 SJ Web Edition
// ************************************************************


//Copyright (C) 1991-2014 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//altsquare DATA_WIDTH=12 DEVICE_FAMILY="Cyclone V" PIPELINE=2 REPRESENTATION="SIGNED" RESULT_WIDTH=24 clock data result
//VERSION_BEGIN 13.1 cbx_altsquare 2014:02:12:20:59:45:SJ cbx_cycloneii 2014:02:12:20:59:46:SJ cbx_lpm_add_sub 2014:02:12:20:59:46:SJ cbx_mgl 2014:02:12:21:04:28:SJ cbx_padd 2014:02:12:20:59:46:SJ cbx_stratix 2014:02:12:20:59:46:SJ cbx_stratixii 2014:02:12:20:59:46:SJ cbx_util_mgl 2014:02:12:20:59:46:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//adder DEVICE_FAMILY="Cyclone V" WIDTH=23 dataa datab datac result
//VERSION_BEGIN 13.1 cbx_mgl 2014:02:12:21:04:28:SJ cbx_stratixii 2014:02:12:20:59:46:SJ cbx_util_mgl 2014:02:12:20:59:46:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone V" WIDTH=14 dataa datab datac result
//VERSION_BEGIN 13.1 cbx_mgl 2014:02:12:21:04:28:SJ cbx_stratixii 2014:02:12:20:59:46:SJ cbx_util_mgl 2014:02:12:20:59:46:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone V" WIDTH=6 dataa datab datac result
//VERSION_BEGIN 13.1 cbx_mgl 2014:02:12:21:04:28:SJ cbx_stratixii 2014:02:12:20:59:46:SJ cbx_util_mgl 2014:02:12:20:59:46:SJ  VERSION_END

//synthesis_resources = lut 86 reg 86 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  mult_12_altsquare
	( 
	clock,
	data,
	result) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [11:0]  data;
	output   [23:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[22:0]	wire_add86_result;
	wire	[13:0]	wire_add91_result;
	wire	[5:0]	wire_add96_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe10;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe11;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe12;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe13;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe14;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe15;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe16;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe17;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe18;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe19;
	reg	[0:0]	dffe1a0;
	reg	[0:0]	dffe1a1;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe2;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe20;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe21;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe22;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe23;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe24;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe25;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe26;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe27;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe28;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe29;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe3;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe30;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe31;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe32;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe33;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe34;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe35;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe36;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe37;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe38;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe39;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe4;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe40;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe41;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe42;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe43;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe44;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe45;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe46;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe47;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe48;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe49;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe5;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe50;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe51;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe52;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe53;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe54;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe55;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe56;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe57;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe58;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe59;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe6;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe60;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe61;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe62;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe63;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe64;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe65;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe66;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe67;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe68;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe69;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe7;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe70;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe71;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe72;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe73;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe74;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe75;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe76;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe77;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe78;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe79;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe8;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe80;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe81;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe82;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe83;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe84;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe85;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dffe9;
	wire  [5:0]   wire_sft100a_in;
	wire  [5:0]   wire_sft100a_out;
	wire  [22:0]   wire_sft87a_in;
	wire  [22:0]   wire_sft87a_out;
	wire  [22:0]   wire_sft88a_in;
	wire  [22:0]   wire_sft88a_out;
	wire  [22:0]   wire_sft89a_in;
	wire  [22:0]   wire_sft89a_out;
	wire  [22:0]   wire_sft90a_in;
	wire  [22:0]   wire_sft90a_out;
	wire  [13:0]   wire_sft92a_in;
	wire  [13:0]   wire_sft92a_out;
	wire  [13:0]   wire_sft93a_in;
	wire  [13:0]   wire_sft93a_out;
	wire  [13:0]   wire_sft94a_in;
	wire  [13:0]   wire_sft94a_out;
	wire  [13:0]   wire_sft95a_in;
	wire  [13:0]   wire_sft95a_out;
	wire  [5:0]   wire_sft97a_in;
	wire  [5:0]   wire_sft97a_out;
	wire  [5:0]   wire_sft98a_in;
	wire  [5:0]   wire_sft98a_out;
	wire  [5:0]   wire_sft99a_in;
	wire  [5:0]   wire_sft99a_out;
	wire aclr;
	wire ena;
	wire  [0:0]  w100w;
	wire  [0:0]  w103w;
	wire  [0:0]  w108w;
	wire  [0:0]  w112w;
	wire  [0:0]  w116w;
	wire  [0:0]  w120w;
	wire  [0:0]  w124w;
	wire  [0:0]  w127w;
	wire  [0:0]  w12w;
	wire  [0:0]  w130w;
	wire  [0:0]  w133w;
	wire  [0:0]  w138w;
	wire  [0:0]  w142w;
	wire  [0:0]  w146w;
	wire  [0:0]  w149w;
	wire  [0:0]  w153w;
	wire  [0:0]  w157w;
	wire  [0:0]  w160w;
	wire  [0:0]  w163w;
	wire  [0:0]  w166w;
	wire  [0:0]  w16w;
	wire  [0:0]  w171w;
	wire  [0:0]  w175w;
	wire  [0:0]  w179w;
	wire  [0:0]  w182w;
	wire  [0:0]  w185w;
	wire  [0:0]  w189w;
	wire  [0:0]  w193w;
	wire  [0:0]  w196w;
	wire  [0:0]  w199w;
	wire  [0:0]  w202w;
	wire  [0:0]  w207w;
	wire  [0:0]  w20w;
	wire  [0:0]  w211w;
	wire  [0:0]  w215w;
	wire  [0:0]  w219w;
	wire  [0:0]  w222w;
	wire  [0:0]  w225w;
	wire  [0:0]  w229w;
	wire  [0:0]  w233w;
	wire  [0:0]  w236w;
	wire  [0:0]  w239w;
	wire  [0:0]  w242w;
	wire  [0:0]  w247w;
	wire  [0:0]  w251w;
	wire  [0:0]  w255w;
	wire  [0:0]  w25w;
	wire  [0:0]  w260w;
	wire  [0:0]  w265w;
	wire  [0:0]  w269w;
	wire  [0:0]  w273w;
	wire  [0:0]  w278w;
	wire  [0:0]  w283w;
	wire  [0:0]  w287w;
	wire  [0:0]  w291w;
	wire  [0:0]  w295w;
	wire  [0:0]  w29w;
	wire  [0:0]  w301w;
	wire  w303w;
	wire  w313w;
	wire  [0:0]  w33w;
	wire  [0:0]  w36w;
	wire  [0:0]  w41w;
	wire  [0:0]  w45w;
	wire  [25:0]  w477w;
	wire  [0:0]  w49w;
	wire  [0:0]  w52w;
	wire  [0:0]  w55w;
	wire  [0:0]  w60w;
	wire  [0:0]  w64w;
	wire  [0:0]  w68w;
	wire  [0:0]  w71w;
	wire  [0:0]  w74w;
	wire  [0:0]  w77w;
	wire  [0:0]  w82w;
	wire  [0:0]  w86w;
	wire  [0:0]  w90w;
	wire  [0:0]  w94w;
	wire  [0:0]  w97w;

	assign
		wire_add86_result = wire_sft87a_out + wire_sft88a_out + wire_sft89a_out;
	assign
		wire_add91_result = wire_sft92a_out + wire_sft93a_out + wire_sft94a_out;
	assign
		wire_add96_result = wire_sft97a_out + wire_sft98a_out + wire_sft99a_out;
	// synopsys translate_off
	initial
		dffe10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe10 <= 1'b0;
		else if  (ena == 1'b1)   dffe10 <= wire_sft90a_out[2];
	// synopsys translate_off
	initial
		dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe11 <= 1'b0;
		else if  (ena == 1'b1)   dffe11 <= w29w[0];
	// synopsys translate_off
	initial
		dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe12 <= 1'b0;
		else if  (ena == 1'b1)   dffe12 <= w36w[0];
	// synopsys translate_off
	initial
		dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe13 <= 1'b0;
		else if  (ena == 1'b1)   dffe13 <= w49w[0];
	// synopsys translate_off
	initial
		dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe14 <= 1'b0;
		else if  (ena == 1'b1)   dffe14 <= wire_sft90a_out[3];
	// synopsys translate_off
	initial
		dffe15 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe15 <= 1'b0;
		else if  (ena == 1'b1)   dffe15 <= w41w[0];
	// synopsys translate_off
	initial
		dffe16 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe16 <= 1'b0;
		else if  (ena == 1'b1)   dffe16 <= w52w[0];
	// synopsys translate_off
	initial
		dffe17 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe17 <= 1'b0;
		else if  (ena == 1'b1)   dffe17 <= w68w[0];
	// synopsys translate_off
	initial
		dffe18 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe18 <= 1'b0;
		else if  (ena == 1'b1)   dffe18 <= wire_sft90a_out[4];
	// synopsys translate_off
	initial
		dffe19 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe19 <= 1'b0;
		else if  (ena == 1'b1)   dffe19 <= w45w[0];
	// synopsys translate_off
	initial
		dffe1a0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe1a0 <= 1'b0;
		else if  (ena == 1'b1)   dffe1a0 <= data[0];
	// synopsys translate_off
	initial
		dffe1a1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe1a1 <= 1'b0;
		else if  (ena == 1'b1)   dffe1a1 <= dffe1a0[0:0];
	// synopsys translate_off
	initial
		dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe2 <= 1'b0;
		else if  (ena == 1'b1)   dffe2 <= dffe3;
	// synopsys translate_off
	initial
		dffe20 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe20 <= 1'b0;
		else if  (ena == 1'b1)   dffe20 <= w55w[0];
	// synopsys translate_off
	initial
		dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe21 <= 1'b0;
		else if  (ena == 1'b1)   dffe21 <= wire_sft95a_out[0];
	// synopsys translate_off
	initial
		dffe22 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe22 <= 1'b0;
		else if  (ena == 1'b1)   dffe22 <= wire_sft90a_out[5];
	// synopsys translate_off
	initial
		dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe23 <= 1'b0;
		else if  (ena == 1'b1)   dffe23 <= w60w[0];
	// synopsys translate_off
	initial
		dffe24 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe24 <= 1'b0;
		else if  (ena == 1'b1)   dffe24 <= w74w[0];
	// synopsys translate_off
	initial
		dffe25 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe25 <= 1'b0;
		else if  (ena == 1'b1)   dffe25 <= wire_sft95a_out[1];
	// synopsys translate_off
	initial
		dffe26 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe26 <= 1'b0;
		else if  (ena == 1'b1)   dffe26 <= wire_sft90a_out[6];
	// synopsys translate_off
	initial
		dffe27 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe27 <= 1'b0;
		else if  (ena == 1'b1)   dffe27 <= w64w[0];
	// synopsys translate_off
	initial
		dffe28 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe28 <= 1'b0;
		else if  (ena == 1'b1)   dffe28 <= w77w[0];
	// synopsys translate_off
	initial
		dffe29 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe29 <= 1'b0;
		else if  (ena == 1'b1)   dffe29 <= wire_sft95a_out[2];
	// synopsys translate_off
	initial
		dffe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe3 <= 1'b0;
		else if  (ena == 1'b1)   dffe3 <= w12w[0];
	// synopsys translate_off
	initial
		dffe30 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe30 <= 1'b0;
		else if  (ena == 1'b1)   dffe30 <= wire_sft90a_out[7];
	// synopsys translate_off
	initial
		dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe31 <= 1'b0;
		else if  (ena == 1'b1)   dffe31 <= w82w[0];
	// synopsys translate_off
	initial
		dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe32 <= 1'b0;
		else if  (ena == 1'b1)   dffe32 <= w100w[0];
	// synopsys translate_off
	initial
		dffe33 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe33 <= 1'b0;
		else if  (ena == 1'b1)   dffe33 <= wire_sft95a_out[3];
	// synopsys translate_off
	initial
		dffe34 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe34 <= 1'b0;
		else if  (ena == 1'b1)   dffe34 <= wire_sft90a_out[8];
	// synopsys translate_off
	initial
		dffe35 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe35 <= 1'b0;
		else if  (ena == 1'b1)   dffe35 <= w86w[0];
	// synopsys translate_off
	initial
		dffe36 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe36 <= 1'b0;
		else if  (ena == 1'b1)   dffe36 <= wire_sft95a_out[4];
	// synopsys translate_off
	initial
		dffe37 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe37 <= 1'b0;
		else if  (ena == 1'b1)   dffe37 <= wire_sft100a_out[0];
	// synopsys translate_off
	initial
		dffe38 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe38 <= 1'b0;
		else if  (ena == 1'b1)   dffe38 <= wire_sft90a_out[9];
	// synopsys translate_off
	initial
		dffe39 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe39 <= 1'b0;
		else if  (ena == 1'b1)   dffe39 <= w108w[0];
	// synopsys translate_off
	initial
		dffe4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe4 <= 1'b0;
		else if  (ena == 1'b1)   dffe4 <= wire_sft90a_out[0];
	// synopsys translate_off
	initial
		dffe40 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe40 <= 1'b0;
		else if  (ena == 1'b1)   dffe40 <= wire_sft95a_out[5];
	// synopsys translate_off
	initial
		dffe41 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe41 <= 1'b0;
		else if  (ena == 1'b1)   dffe41 <= wire_sft100a_out[1];
	// synopsys translate_off
	initial
		dffe42 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe42 <= 1'b0;
		else if  (ena == 1'b1)   dffe42 <= wire_sft90a_out[10];
	// synopsys translate_off
	initial
		dffe43 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe43 <= 1'b0;
		else if  (ena == 1'b1)   dffe43 <= w112w[0];
	// synopsys translate_off
	initial
		dffe44 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe44 <= 1'b0;
		else if  (ena == 1'b1)   dffe44 <= wire_sft95a_out[6];
	// synopsys translate_off
	initial
		dffe45 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe45 <= 1'b0;
		else if  (ena == 1'b1)   dffe45 <= wire_sft100a_out[2];
	// synopsys translate_off
	initial
		dffe46 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe46 <= 1'b0;
		else if  (ena == 1'b1)   dffe46 <= wire_sft90a_out[11];
	// synopsys translate_off
	initial
		dffe47 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe47 <= 1'b0;
		else if  (ena == 1'b1)   dffe47 <= w163w[0];
	// synopsys translate_off
	initial
		dffe48 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe48 <= 1'b0;
		else if  (ena == 1'b1)   dffe48 <= wire_sft95a_out[7];
	// synopsys translate_off
	initial
		dffe49 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe49 <= 1'b0;
		else if  (ena == 1'b1)   dffe49 <= wire_sft100a_out[3];
	// synopsys translate_off
	initial
		dffe5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe5 <= 1'b0;
		else if  (ena == 1'b1)   dffe5 <= w16w[0];
	// synopsys translate_off
	initial
		dffe50 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe50 <= 1'b0;
		else if  (ena == 1'b1)   dffe50 <= wire_sft90a_out[12];
	// synopsys translate_off
	initial
		dffe51 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe51 <= 1'b0;
		else if  (ena == 1'b1)   dffe51 <= w166w[0];
	// synopsys translate_off
	initial
		dffe52 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe52 <= 1'b0;
		else if  (ena == 1'b1)   dffe52 <= wire_sft95a_out[8];
	// synopsys translate_off
	initial
		dffe53 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe53 <= 1'b0;
		else if  (ena == 1'b1)   dffe53 <= wire_sft100a_out[4];
	// synopsys translate_off
	initial
		dffe54 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe54 <= 1'b0;
		else if  (ena == 1'b1)   dffe54 <= wire_sft90a_out[13];
	// synopsys translate_off
	initial
		dffe55 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe55 <= 1'b0;
		else if  (ena == 1'b1)   dffe55 <= w199w[0];
	// synopsys translate_off
	initial
		dffe56 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe56 <= 1'b0;
		else if  (ena == 1'b1)   dffe56 <= wire_sft95a_out[9];
	// synopsys translate_off
	initial
		dffe57 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe57 <= 1'b0;
		else if  (ena == 1'b1)   dffe57 <= wire_sft100a_out[5];
	// synopsys translate_off
	initial
		dffe58 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe58 <= 1'b0;
		else if  (ena == 1'b1)   dffe58 <= wire_sft90a_out[14];
	// synopsys translate_off
	initial
		dffe59 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe59 <= 1'b0;
		else if  (ena == 1'b1)   dffe59 <= w175w[0];
	// synopsys translate_off
	initial
		dffe6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe6 <= 1'b0;
		else if  (ena == 1'b1)   dffe6 <= w20w[0];
	// synopsys translate_off
	initial
		dffe60 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe60 <= 1'b0;
		else if  (ena == 1'b1)   dffe60 <= w202w[0];
	// synopsys translate_off
	initial
		dffe61 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe61 <= 1'b0;
		else if  (ena == 1'b1)   dffe61 <= wire_sft95a_out[10];
	// synopsys translate_off
	initial
		dffe62 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe62 <= 1'b0;
		else if  (ena == 1'b1)   dffe62 <= wire_sft90a_out[15];
	// synopsys translate_off
	initial
		dffe63 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe63 <= 1'b0;
		else if  (ena == 1'b1)   dffe63 <= (~ w283w[0]);
	// synopsys translate_off
	initial
		dffe64 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe64 <= 1'b0;
		else if  (ena == 1'b1)   dffe64 <= w239w[0];
	// synopsys translate_off
	initial
		dffe65 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe65 <= 1'b0;
		else if  (ena == 1'b1)   dffe65 <= wire_sft95a_out[11];
	// synopsys translate_off
	initial
		dffe66 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe66 <= 1'b0;
		else if  (ena == 1'b1)   dffe66 <= wire_sft90a_out[16];
	// synopsys translate_off
	initial
		dffe67 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe67 <= 1'b0;
		else if  (ena == 1'b1)   dffe67 <= (~ w287w[0]);
	// synopsys translate_off
	initial
		dffe68 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe68 <= 1'b0;
		else if  (ena == 1'b1)   dffe68 <= w242w[0];
	// synopsys translate_off
	initial
		dffe69 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe69 <= 1'b0;
		else if  (ena == 1'b1)   dffe69 <= wire_sft95a_out[12];
	// synopsys translate_off
	initial
		dffe7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe7 <= 1'b0;
		else if  (ena == 1'b1)   dffe7 <= wire_sft90a_out[1];
	// synopsys translate_off
	initial
		dffe70 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe70 <= 1'b0;
		else if  (ena == 1'b1)   dffe70 <= wire_sft90a_out[17];
	// synopsys translate_off
	initial
		dffe71 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe71 <= 1'b0;
		else if  (ena == 1'b1)   dffe71 <= w247w[0];
	// synopsys translate_off
	initial
		dffe72 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe72 <= 1'b0;
		else if  (ena == 1'b1)   dffe72 <= (~ w291w[0]);
	// synopsys translate_off
	initial
		dffe73 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe73 <= 1'b0;
		else if  (ena == 1'b1)   dffe73 <= wire_sft95a_out[13];
	// synopsys translate_off
	initial
		dffe74 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe74 <= 1'b0;
		else if  (ena == 1'b1)   dffe74 <= wire_sft90a_out[18];
	// synopsys translate_off
	initial
		dffe75 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe75 <= 1'b0;
		else if  (ena == 1'b1)   dffe75 <= w251w[0];
	// synopsys translate_off
	initial
		dffe76 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe76 <= 1'b0;
		else if  (ena == 1'b1)   dffe76 <= (~ w295w[0]);
	// synopsys translate_off
	initial
		dffe77 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe77 <= 1'b0;
		else if  (ena == 1'b1)   dffe77 <= wire_sft90a_out[19];
	// synopsys translate_off
	initial
		dffe78 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe78 <= 1'b0;
		else if  (ena == 1'b1)   dffe78 <= w301w[0];
	// synopsys translate_off
	initial
		dffe79 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe79 <= 1'b0;
		else if  (ena == 1'b1)   dffe79 <= 1'b1;
	// synopsys translate_off
	initial
		dffe8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe8 <= 1'b0;
		else if  (ena == 1'b1)   dffe8 <= w25w[0];
	// synopsys translate_off
	initial
		dffe80 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe80 <= 1'b0;
		else if  (ena == 1'b1)   dffe80 <= wire_sft90a_out[20];
	// synopsys translate_off
	initial
		dffe81 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe81 <= 1'b0;
		else if  (ena == 1'b1)   dffe81 <= 1'b1;
	// synopsys translate_off
	initial
		dffe82 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe82 <= 1'b0;
		else if  (ena == 1'b1)   dffe82 <= wire_sft90a_out[21];
	// synopsys translate_off
	initial
		dffe83 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe83 <= 1'b0;
		else if  (ena == 1'b1)   dffe83 <= 1'b1;
	// synopsys translate_off
	initial
		dffe84 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe84 <= 1'b0;
		else if  (ena == 1'b1)   dffe84 <= wire_sft90a_out[22];
	// synopsys translate_off
	initial
		dffe85 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe85 <= 1'b0;
		else if  (ena == 1'b1)   dffe85 <= 1'b1;
	// synopsys translate_off
	initial
		dffe9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe9 <= 1'b0;
		else if  (ena == 1'b1)   dffe9 <= w33w[0];
	soft   sft100a_0
	( 
	.in(wire_sft100a_in[0:0]),
	.out(wire_sft100a_out[0:0]));
	soft   sft100a_1
	( 
	.in(wire_sft100a_in[1:1]),
	.out(wire_sft100a_out[1:1]));
	soft   sft100a_2
	( 
	.in(wire_sft100a_in[2:2]),
	.out(wire_sft100a_out[2:2]));
	soft   sft100a_3
	( 
	.in(wire_sft100a_in[3:3]),
	.out(wire_sft100a_out[3:3]));
	soft   sft100a_4
	( 
	.in(wire_sft100a_in[4:4]),
	.out(wire_sft100a_out[4:4]));
	soft   sft100a_5
	( 
	.in(wire_sft100a_in[5:5]),
	.out(wire_sft100a_out[5:5]));
	assign
		wire_sft100a_in = wire_add96_result;
	soft   sft87a_0
	( 
	.in(wire_sft87a_in[0:0]),
	.out(wire_sft87a_out[0:0]));
	soft   sft87a_1
	( 
	.in(wire_sft87a_in[1:1]),
	.out(wire_sft87a_out[1:1]));
	soft   sft87a_2
	( 
	.in(wire_sft87a_in[2:2]),
	.out(wire_sft87a_out[2:2]));
	soft   sft87a_3
	( 
	.in(wire_sft87a_in[3:3]),
	.out(wire_sft87a_out[3:3]));
	soft   sft87a_4
	( 
	.in(wire_sft87a_in[4:4]),
	.out(wire_sft87a_out[4:4]));
	soft   sft87a_5
	( 
	.in(wire_sft87a_in[5:5]),
	.out(wire_sft87a_out[5:5]));
	soft   sft87a_6
	( 
	.in(wire_sft87a_in[6:6]),
	.out(wire_sft87a_out[6:6]));
	soft   sft87a_7
	( 
	.in(wire_sft87a_in[7:7]),
	.out(wire_sft87a_out[7:7]));
	soft   sft87a_8
	( 
	.in(wire_sft87a_in[8:8]),
	.out(wire_sft87a_out[8:8]));
	soft   sft87a_9
	( 
	.in(wire_sft87a_in[9:9]),
	.out(wire_sft87a_out[9:9]));
	soft   sft87a_10
	( 
	.in(wire_sft87a_in[10:10]),
	.out(wire_sft87a_out[10:10]));
	soft   sft87a_11
	( 
	.in(wire_sft87a_in[11:11]),
	.out(wire_sft87a_out[11:11]));
	soft   sft87a_12
	( 
	.in(wire_sft87a_in[12:12]),
	.out(wire_sft87a_out[12:12]));
	soft   sft87a_13
	( 
	.in(wire_sft87a_in[13:13]),
	.out(wire_sft87a_out[13:13]));
	soft   sft87a_14
	( 
	.in(wire_sft87a_in[14:14]),
	.out(wire_sft87a_out[14:14]));
	soft   sft87a_15
	( 
	.in(wire_sft87a_in[15:15]),
	.out(wire_sft87a_out[15:15]));
	soft   sft87a_16
	( 
	.in(wire_sft87a_in[16:16]),
	.out(wire_sft87a_out[16:16]));
	soft   sft87a_17
	( 
	.in(wire_sft87a_in[17:17]),
	.out(wire_sft87a_out[17:17]));
	soft   sft87a_18
	( 
	.in(wire_sft87a_in[18:18]),
	.out(wire_sft87a_out[18:18]));
	soft   sft87a_19
	( 
	.in(wire_sft87a_in[19:19]),
	.out(wire_sft87a_out[19:19]));
	soft   sft87a_20
	( 
	.in(wire_sft87a_in[20:20]),
	.out(wire_sft87a_out[20:20]));
	soft   sft87a_21
	( 
	.in(wire_sft87a_in[21:21]),
	.out(wire_sft87a_out[21:21]));
	soft   sft87a_22
	( 
	.in(wire_sft87a_in[22:22]),
	.out(wire_sft87a_out[22:22]));
	assign
		wire_sft87a_in = {dffe85, {dffe83, {dffe81, {dffe78, {dffe75, {dffe71, {dffe67, {dffe63, {dffe59, {dffe55, {dffe51, {dffe47, {dffe43, {dffe39, {dffe35, {dffe31, {dffe27, {dffe23, {dffe19, {dffe15, {dffe11, {dffe8, dffe5}}}}}}}}}}}}}}}}}}}}}};
	soft   sft88a_0
	( 
	.in(wire_sft88a_in[0:0]),
	.out(wire_sft88a_out[0:0]));
	soft   sft88a_1
	( 
	.in(wire_sft88a_in[1:1]),
	.out(wire_sft88a_out[1:1]));
	soft   sft88a_2
	( 
	.in(wire_sft88a_in[2:2]),
	.out(wire_sft88a_out[2:2]));
	soft   sft88a_3
	( 
	.in(wire_sft88a_in[3:3]),
	.out(wire_sft88a_out[3:3]));
	soft   sft88a_4
	( 
	.in(wire_sft88a_in[4:4]),
	.out(wire_sft88a_out[4:4]));
	soft   sft88a_5
	( 
	.in(wire_sft88a_in[5:5]),
	.out(wire_sft88a_out[5:5]));
	soft   sft88a_6
	( 
	.in(wire_sft88a_in[6:6]),
	.out(wire_sft88a_out[6:6]));
	soft   sft88a_7
	( 
	.in(wire_sft88a_in[7:7]),
	.out(wire_sft88a_out[7:7]));
	soft   sft88a_8
	( 
	.in(wire_sft88a_in[8:8]),
	.out(wire_sft88a_out[8:8]));
	soft   sft88a_9
	( 
	.in(wire_sft88a_in[9:9]),
	.out(wire_sft88a_out[9:9]));
	soft   sft88a_10
	( 
	.in(wire_sft88a_in[10:10]),
	.out(wire_sft88a_out[10:10]));
	soft   sft88a_11
	( 
	.in(wire_sft88a_in[11:11]),
	.out(wire_sft88a_out[11:11]));
	soft   sft88a_12
	( 
	.in(wire_sft88a_in[12:12]),
	.out(wire_sft88a_out[12:12]));
	soft   sft88a_13
	( 
	.in(wire_sft88a_in[13:13]),
	.out(wire_sft88a_out[13:13]));
	soft   sft88a_14
	( 
	.in(wire_sft88a_in[14:14]),
	.out(wire_sft88a_out[14:14]));
	soft   sft88a_15
	( 
	.in(wire_sft88a_in[15:15]),
	.out(wire_sft88a_out[15:15]));
	soft   sft88a_16
	( 
	.in(wire_sft88a_in[16:16]),
	.out(wire_sft88a_out[16:16]));
	soft   sft88a_17
	( 
	.in(wire_sft88a_in[17:17]),
	.out(wire_sft88a_out[17:17]));
	soft   sft88a_18
	( 
	.in(wire_sft88a_in[18:18]),
	.out(wire_sft88a_out[18:18]));
	soft   sft88a_19
	( 
	.in(wire_sft88a_in[19:19]),
	.out(wire_sft88a_out[19:19]));
	soft   sft88a_20
	( 
	.in(wire_sft88a_in[20:20]),
	.out(wire_sft88a_out[20:20]));
	soft   sft88a_21
	( 
	.in(wire_sft88a_in[21:21]),
	.out(wire_sft88a_out[21:21]));
	soft   sft88a_22
	( 
	.in(wire_sft88a_in[22:22]),
	.out(wire_sft88a_out[22:22]));
	assign
		wire_sft88a_in = {w313w, {w313w, {w313w, {dffe79, {dffe76, {dffe72, {dffe68, {dffe64, {dffe60, {dffe56, {dffe52, {dffe48, {dffe44, {dffe40, {dffe36, {dffe32, {dffe28, {dffe24, {dffe20, {dffe16, {dffe12, {dffe9, dffe6}}}}}}}}}}}}}}}}}}}}}};
	soft   sft89a_0
	( 
	.in(wire_sft89a_in[0:0]),
	.out(wire_sft89a_out[0:0]));
	soft   sft89a_1
	( 
	.in(wire_sft89a_in[1:1]),
	.out(wire_sft89a_out[1:1]));
	soft   sft89a_2
	( 
	.in(wire_sft89a_in[2:2]),
	.out(wire_sft89a_out[2:2]));
	soft   sft89a_3
	( 
	.in(wire_sft89a_in[3:3]),
	.out(wire_sft89a_out[3:3]));
	soft   sft89a_4
	( 
	.in(wire_sft89a_in[4:4]),
	.out(wire_sft89a_out[4:4]));
	soft   sft89a_5
	( 
	.in(wire_sft89a_in[5:5]),
	.out(wire_sft89a_out[5:5]));
	soft   sft89a_6
	( 
	.in(wire_sft89a_in[6:6]),
	.out(wire_sft89a_out[6:6]));
	soft   sft89a_7
	( 
	.in(wire_sft89a_in[7:7]),
	.out(wire_sft89a_out[7:7]));
	soft   sft89a_8
	( 
	.in(wire_sft89a_in[8:8]),
	.out(wire_sft89a_out[8:8]));
	soft   sft89a_9
	( 
	.in(wire_sft89a_in[9:9]),
	.out(wire_sft89a_out[9:9]));
	soft   sft89a_10
	( 
	.in(wire_sft89a_in[10:10]),
	.out(wire_sft89a_out[10:10]));
	soft   sft89a_11
	( 
	.in(wire_sft89a_in[11:11]),
	.out(wire_sft89a_out[11:11]));
	soft   sft89a_12
	( 
	.in(wire_sft89a_in[12:12]),
	.out(wire_sft89a_out[12:12]));
	soft   sft89a_13
	( 
	.in(wire_sft89a_in[13:13]),
	.out(wire_sft89a_out[13:13]));
	soft   sft89a_14
	( 
	.in(wire_sft89a_in[14:14]),
	.out(wire_sft89a_out[14:14]));
	soft   sft89a_15
	( 
	.in(wire_sft89a_in[15:15]),
	.out(wire_sft89a_out[15:15]));
	soft   sft89a_16
	( 
	.in(wire_sft89a_in[16:16]),
	.out(wire_sft89a_out[16:16]));
	soft   sft89a_17
	( 
	.in(wire_sft89a_in[17:17]),
	.out(wire_sft89a_out[17:17]));
	soft   sft89a_18
	( 
	.in(wire_sft89a_in[18:18]),
	.out(wire_sft89a_out[18:18]));
	soft   sft89a_19
	( 
	.in(wire_sft89a_in[19:19]),
	.out(wire_sft89a_out[19:19]));
	soft   sft89a_20
	( 
	.in(wire_sft89a_in[20:20]),
	.out(wire_sft89a_out[20:20]));
	soft   sft89a_21
	( 
	.in(wire_sft89a_in[21:21]),
	.out(wire_sft89a_out[21:21]));
	soft   sft89a_22
	( 
	.in(wire_sft89a_in[22:22]),
	.out(wire_sft89a_out[22:22]));
	assign
		wire_sft89a_in = {w313w, {w313w, {w313w, {w313w, {w313w, {dffe73, {dffe69, {dffe65, {dffe61, {dffe57, {dffe53, {dffe49, {dffe45, {dffe41, {dffe37, {dffe33, {dffe29, {dffe25, {dffe21, {dffe17, {dffe13, {2{w313w}}}}}}}}}}}}}}}}}}}}}}};
	soft   sft90a_0
	( 
	.in(wire_sft90a_in[0:0]),
	.out(wire_sft90a_out[0:0]));
	soft   sft90a_1
	( 
	.in(wire_sft90a_in[1:1]),
	.out(wire_sft90a_out[1:1]));
	soft   sft90a_2
	( 
	.in(wire_sft90a_in[2:2]),
	.out(wire_sft90a_out[2:2]));
	soft   sft90a_3
	( 
	.in(wire_sft90a_in[3:3]),
	.out(wire_sft90a_out[3:3]));
	soft   sft90a_4
	( 
	.in(wire_sft90a_in[4:4]),
	.out(wire_sft90a_out[4:4]));
	soft   sft90a_5
	( 
	.in(wire_sft90a_in[5:5]),
	.out(wire_sft90a_out[5:5]));
	soft   sft90a_6
	( 
	.in(wire_sft90a_in[6:6]),
	.out(wire_sft90a_out[6:6]));
	soft   sft90a_7
	( 
	.in(wire_sft90a_in[7:7]),
	.out(wire_sft90a_out[7:7]));
	soft   sft90a_8
	( 
	.in(wire_sft90a_in[8:8]),
	.out(wire_sft90a_out[8:8]));
	soft   sft90a_9
	( 
	.in(wire_sft90a_in[9:9]),
	.out(wire_sft90a_out[9:9]));
	soft   sft90a_10
	( 
	.in(wire_sft90a_in[10:10]),
	.out(wire_sft90a_out[10:10]));
	soft   sft90a_11
	( 
	.in(wire_sft90a_in[11:11]),
	.out(wire_sft90a_out[11:11]));
	soft   sft90a_12
	( 
	.in(wire_sft90a_in[12:12]),
	.out(wire_sft90a_out[12:12]));
	soft   sft90a_13
	( 
	.in(wire_sft90a_in[13:13]),
	.out(wire_sft90a_out[13:13]));
	soft   sft90a_14
	( 
	.in(wire_sft90a_in[14:14]),
	.out(wire_sft90a_out[14:14]));
	soft   sft90a_15
	( 
	.in(wire_sft90a_in[15:15]),
	.out(wire_sft90a_out[15:15]));
	soft   sft90a_16
	( 
	.in(wire_sft90a_in[16:16]),
	.out(wire_sft90a_out[16:16]));
	soft   sft90a_17
	( 
	.in(wire_sft90a_in[17:17]),
	.out(wire_sft90a_out[17:17]));
	soft   sft90a_18
	( 
	.in(wire_sft90a_in[18:18]),
	.out(wire_sft90a_out[18:18]));
	soft   sft90a_19
	( 
	.in(wire_sft90a_in[19:19]),
	.out(wire_sft90a_out[19:19]));
	soft   sft90a_20
	( 
	.in(wire_sft90a_in[20:20]),
	.out(wire_sft90a_out[20:20]));
	soft   sft90a_21
	( 
	.in(wire_sft90a_in[21:21]),
	.out(wire_sft90a_out[21:21]));
	soft   sft90a_22
	( 
	.in(wire_sft90a_in[22:22]),
	.out(wire_sft90a_out[22:22]));
	assign
		wire_sft90a_in = wire_add86_result;
	soft   sft92a_0
	( 
	.in(wire_sft92a_in[0:0]),
	.out(wire_sft92a_out[0:0]));
	soft   sft92a_1
	( 
	.in(wire_sft92a_in[1:1]),
	.out(wire_sft92a_out[1:1]));
	soft   sft92a_2
	( 
	.in(wire_sft92a_in[2:2]),
	.out(wire_sft92a_out[2:2]));
	soft   sft92a_3
	( 
	.in(wire_sft92a_in[3:3]),
	.out(wire_sft92a_out[3:3]));
	soft   sft92a_4
	( 
	.in(wire_sft92a_in[4:4]),
	.out(wire_sft92a_out[4:4]));
	soft   sft92a_5
	( 
	.in(wire_sft92a_in[5:5]),
	.out(wire_sft92a_out[5:5]));
	soft   sft92a_6
	( 
	.in(wire_sft92a_in[6:6]),
	.out(wire_sft92a_out[6:6]));
	soft   sft92a_7
	( 
	.in(wire_sft92a_in[7:7]),
	.out(wire_sft92a_out[7:7]));
	soft   sft92a_8
	( 
	.in(wire_sft92a_in[8:8]),
	.out(wire_sft92a_out[8:8]));
	soft   sft92a_9
	( 
	.in(wire_sft92a_in[9:9]),
	.out(wire_sft92a_out[9:9]));
	soft   sft92a_10
	( 
	.in(wire_sft92a_in[10:10]),
	.out(wire_sft92a_out[10:10]));
	soft   sft92a_11
	( 
	.in(wire_sft92a_in[11:11]),
	.out(wire_sft92a_out[11:11]));
	soft   sft92a_12
	( 
	.in(wire_sft92a_in[12:12]),
	.out(wire_sft92a_out[12:12]));
	soft   sft92a_13
	( 
	.in(wire_sft92a_in[13:13]),
	.out(wire_sft92a_out[13:13]));
	assign
		wire_sft92a_in = {w313w, {w211w[0], {w207w[0], {(~ w278w[0]), {(~ w273w[0]), {w229w[0], {w225w[0], {w189w[0], {w185w[0], {w153w[0], {w149w[0], {w120w[0], {w116w[0], w90w[0]}}}}}}}}}}}}};
	soft   sft93a_0
	( 
	.in(wire_sft93a_in[0:0]),
	.out(wire_sft93a_out[0:0]));
	soft   sft93a_1
	( 
	.in(wire_sft93a_in[1:1]),
	.out(wire_sft93a_out[1:1]));
	soft   sft93a_2
	( 
	.in(wire_sft93a_in[2:2]),
	.out(wire_sft93a_out[2:2]));
	soft   sft93a_3
	( 
	.in(wire_sft93a_in[3:3]),
	.out(wire_sft93a_out[3:3]));
	soft   sft93a_4
	( 
	.in(wire_sft93a_in[4:4]),
	.out(wire_sft93a_out[4:4]));
	soft   sft93a_5
	( 
	.in(wire_sft93a_in[5:5]),
	.out(wire_sft93a_out[5:5]));
	soft   sft93a_6
	( 
	.in(wire_sft93a_in[6:6]),
	.out(wire_sft93a_out[6:6]));
	soft   sft93a_7
	( 
	.in(wire_sft93a_in[7:7]),
	.out(wire_sft93a_out[7:7]));
	soft   sft93a_8
	( 
	.in(wire_sft93a_in[8:8]),
	.out(wire_sft93a_out[8:8]));
	soft   sft93a_9
	( 
	.in(wire_sft93a_in[9:9]),
	.out(wire_sft93a_out[9:9]));
	soft   sft93a_10
	( 
	.in(wire_sft93a_in[10:10]),
	.out(wire_sft93a_out[10:10]));
	soft   sft93a_11
	( 
	.in(wire_sft93a_in[11:11]),
	.out(wire_sft93a_out[11:11]));
	soft   sft93a_12
	( 
	.in(wire_sft93a_in[12:12]),
	.out(wire_sft93a_out[12:12]));
	soft   sft93a_13
	( 
	.in(wire_sft93a_in[13:13]),
	.out(wire_sft93a_out[13:13]));
	assign
		wire_sft93a_in = {w313w, {w313w, {w313w, {w236w[0], {w233w[0], {w196w[0], {w193w[0], {w160w[0], {w157w[0], {w127w[0], {w124w[0], {w97w[0], {w94w[0], w71w[0]}}}}}}}}}}}}};
	soft   sft94a_0
	( 
	.in(wire_sft94a_in[0:0]),
	.out(wire_sft94a_out[0:0]));
	soft   sft94a_1
	( 
	.in(wire_sft94a_in[1:1]),
	.out(wire_sft94a_out[1:1]));
	soft   sft94a_2
	( 
	.in(wire_sft94a_in[2:2]),
	.out(wire_sft94a_out[2:2]));
	soft   sft94a_3
	( 
	.in(wire_sft94a_in[3:3]),
	.out(wire_sft94a_out[3:3]));
	soft   sft94a_4
	( 
	.in(wire_sft94a_in[4:4]),
	.out(wire_sft94a_out[4:4]));
	soft   sft94a_5
	( 
	.in(wire_sft94a_in[5:5]),
	.out(wire_sft94a_out[5:5]));
	soft   sft94a_6
	( 
	.in(wire_sft94a_in[6:6]),
	.out(wire_sft94a_out[6:6]));
	soft   sft94a_7
	( 
	.in(wire_sft94a_in[7:7]),
	.out(wire_sft94a_out[7:7]));
	soft   sft94a_8
	( 
	.in(wire_sft94a_in[8:8]),
	.out(wire_sft94a_out[8:8]));
	soft   sft94a_9
	( 
	.in(wire_sft94a_in[9:9]),
	.out(wire_sft94a_out[9:9]));
	soft   sft94a_10
	( 
	.in(wire_sft94a_in[10:10]),
	.out(wire_sft94a_out[10:10]));
	soft   sft94a_11
	( 
	.in(wire_sft94a_in[11:11]),
	.out(wire_sft94a_out[11:11]));
	soft   sft94a_12
	( 
	.in(wire_sft94a_in[12:12]),
	.out(wire_sft94a_out[12:12]));
	soft   sft94a_13
	( 
	.in(wire_sft94a_in[13:13]),
	.out(wire_sft94a_out[13:13]));
	assign
		wire_sft94a_in = {w313w, {w313w, {w313w, {w313w, {w171w[0], {(~ w269w[0]), {(~ w265w[0]), {w222w[0], {w219w[0], {w182w[0], {w179w[0], {w146w[0], {2{w313w}}}}}}}}}}}}}};
	soft   sft95a_0
	( 
	.in(wire_sft95a_in[0:0]),
	.out(wire_sft95a_out[0:0]));
	soft   sft95a_1
	( 
	.in(wire_sft95a_in[1:1]),
	.out(wire_sft95a_out[1:1]));
	soft   sft95a_2
	( 
	.in(wire_sft95a_in[2:2]),
	.out(wire_sft95a_out[2:2]));
	soft   sft95a_3
	( 
	.in(wire_sft95a_in[3:3]),
	.out(wire_sft95a_out[3:3]));
	soft   sft95a_4
	( 
	.in(wire_sft95a_in[4:4]),
	.out(wire_sft95a_out[4:4]));
	soft   sft95a_5
	( 
	.in(wire_sft95a_in[5:5]),
	.out(wire_sft95a_out[5:5]));
	soft   sft95a_6
	( 
	.in(wire_sft95a_in[6:6]),
	.out(wire_sft95a_out[6:6]));
	soft   sft95a_7
	( 
	.in(wire_sft95a_in[7:7]),
	.out(wire_sft95a_out[7:7]));
	soft   sft95a_8
	( 
	.in(wire_sft95a_in[8:8]),
	.out(wire_sft95a_out[8:8]));
	soft   sft95a_9
	( 
	.in(wire_sft95a_in[9:9]),
	.out(wire_sft95a_out[9:9]));
	soft   sft95a_10
	( 
	.in(wire_sft95a_in[10:10]),
	.out(wire_sft95a_out[10:10]));
	soft   sft95a_11
	( 
	.in(wire_sft95a_in[11:11]),
	.out(wire_sft95a_out[11:11]));
	soft   sft95a_12
	( 
	.in(wire_sft95a_in[12:12]),
	.out(wire_sft95a_out[12:12]));
	soft   sft95a_13
	( 
	.in(wire_sft95a_in[13:13]),
	.out(wire_sft95a_out[13:13]));
	assign
		wire_sft95a_in = wire_add91_result;
	soft   sft97a_0
	( 
	.in(wire_sft97a_in[0:0]),
	.out(wire_sft97a_out[0:0]));
	soft   sft97a_1
	( 
	.in(wire_sft97a_in[1:1]),
	.out(wire_sft97a_out[1:1]));
	soft   sft97a_2
	( 
	.in(wire_sft97a_in[2:2]),
	.out(wire_sft97a_out[2:2]));
	soft   sft97a_3
	( 
	.in(wire_sft97a_in[3:3]),
	.out(wire_sft97a_out[3:3]));
	soft   sft97a_4
	( 
	.in(wire_sft97a_in[4:4]),
	.out(wire_sft97a_out[4:4]));
	soft   sft97a_5
	( 
	.in(wire_sft97a_in[5:5]),
	.out(wire_sft97a_out[5:5]));
	assign
		wire_sft97a_in = {w313w, {w142w[0], {w138w[0], {(~ w260w[0]), {(~ w255w[0]), w215w[0]}}}}};
	soft   sft98a_0
	( 
	.in(wire_sft98a_in[0:0]),
	.out(wire_sft98a_out[0:0]));
	soft   sft98a_1
	( 
	.in(wire_sft98a_in[1:1]),
	.out(wire_sft98a_out[1:1]));
	soft   sft98a_2
	( 
	.in(wire_sft98a_in[2:2]),
	.out(wire_sft98a_out[2:2]));
	soft   sft98a_3
	( 
	.in(wire_sft98a_in[3:3]),
	.out(wire_sft98a_out[3:3]));
	soft   sft98a_4
	( 
	.in(wire_sft98a_in[4:4]),
	.out(wire_sft98a_out[4:4]));
	soft   sft98a_5
	( 
	.in(wire_sft98a_in[5:5]),
	.out(wire_sft98a_out[5:5]));
	assign
		wire_sft98a_in = {w313w, {w313w, {w313w, {w133w[0], {w130w[0], w103w[0]}}}}};
	soft   sft99a_0
	( 
	.in(wire_sft99a_in[0:0]),
	.out(wire_sft99a_out[0:0]));
	soft   sft99a_1
	( 
	.in(wire_sft99a_in[1:1]),
	.out(wire_sft99a_out[1:1]));
	soft   sft99a_2
	( 
	.in(wire_sft99a_in[2:2]),
	.out(wire_sft99a_out[2:2]));
	soft   sft99a_3
	( 
	.in(wire_sft99a_in[3:3]),
	.out(wire_sft99a_out[3:3]));
	soft   sft99a_4
	( 
	.in(wire_sft99a_in[4:4]),
	.out(wire_sft99a_out[4:4]));
	soft   sft99a_5
	( 
	.in(wire_sft99a_in[5:5]),
	.out(wire_sft99a_out[5:5]));
	assign
		wire_sft99a_in = {w313w, {w313w, {w313w, {w313w, {w303w, w313w}}}}};
	assign
		aclr = 1'b0,
		ena = 1'b1,
		result = {w477w[23:2], 1'b0, dffe1a1[0:0]},
		w100w = (data[6] & data[3]),
		w103w = (data[6] & data[4]),
		w108w = (data[6] & (~ data[5])),
		w112w = (data[6] & data[5]),
		w116w = (data[7] & data[0]),
		w120w = (data[7] & data[1]),
		w124w = (data[7] & data[2]),
		w127w = (data[7] & data[3]),
		w12w = (data[1] & (~ data[0])),
		w130w = (data[7] & data[4]),
		w133w = (data[7] & data[5]),
		w138w = (data[7] & (~ data[6])),
		w142w = (data[7] & data[6]),
		w146w = (data[8] & data[0]),
		w149w = (data[8] & data[1]),
		w153w = (data[8] & data[2]),
		w157w = (data[8] & data[3]),
		w160w = (data[8] & data[4]),
		w163w = (data[8] & data[5]),
		w166w = (data[8] & data[6]),
		w16w = (data[1] & data[0]),
		w171w = (data[8] & (~ data[7])),
		w175w = (data[8] & data[7]),
		w179w = (data[9] & data[0]),
		w182w = (data[9] & data[1]),
		w185w = (data[9] & data[2]),
		w189w = (data[9] & data[3]),
		w193w = (data[9] & data[4]),
		w196w = (data[9] & data[5]),
		w199w = (data[9] & data[6]),
		w202w = (data[9] & data[7]),
		w207w = (data[9] & (~ data[8])),
		w20w = (data[2] & data[0]),
		w211w = (data[9] & data[8]),
		w215w = (data[10] & data[0]),
		w219w = (data[10] & data[1]),
		w222w = (data[10] & data[2]),
		w225w = (data[10] & data[3]),
		w229w = (data[10] & data[4]),
		w233w = (data[10] & data[5]),
		w236w = (data[10] & data[6]),
		w239w = (data[10] & data[7]),
		w242w = (data[10] & data[8]),
		w247w = (data[10] & (~ data[9])),
		w251w = (data[10] & data[9]),
		w255w = (data[11] & data[0]),
		w25w = (data[2] & (~ data[1])),
		w260w = (data[11] & data[1]),
		w265w = (data[11] & data[2]),
		w269w = (data[11] & data[3]),
		w273w = (data[11] & data[4]),
		w278w = (data[11] & data[5]),
		w283w = (data[11] & data[6]),
		w287w = (data[11] & data[7]),
		w291w = (data[11] & data[8]),
		w295w = (data[11] & data[9]),
		w29w = (data[2] & data[1]),
		w301w = (data[11] & (~ data[10])),
		w303w = 1'b1,
		w313w = 1'b0,
		w33w = (data[3] & data[0]),
		w36w = (data[3] & data[1]),
		w41w = (data[3] & (~ data[2])),
		w45w = (data[3] & data[2]),
		w477w = {dffe84, dffe82, dffe80, dffe77, dffe74, dffe70, dffe66, dffe62, dffe58, dffe54, dffe50, dffe46, dffe42, dffe38, dffe34, dffe30, dffe26, dffe22, dffe18, dffe14, dffe10, dffe7, dffe4, dffe2, {2{w313w}}},
		w49w = (data[4] & data[0]),
		w52w = (data[4] & data[1]),
		w55w = (data[4] & data[2]),
		w60w = (data[4] & (~ data[3])),
		w64w = (data[4] & data[3]),
		w68w = (data[5] & data[0]),
		w71w = (data[5] & data[1]),
		w74w = (data[5] & data[2]),
		w77w = (data[5] & data[3]),
		w82w = (data[5] & (~ data[4])),
		w86w = (data[5] & data[4]),
		w90w = (data[6] & data[0]),
		w94w = (data[6] & data[1]),
		w97w = (data[6] & data[2]);
endmodule //mult_12_altsquare
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module mult_12 (
	clock,
	dataa,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[11:0]  dataa;
	output	[23:0]  result;

	wire [23:0] sub_wire0;
	wire [23:0] result = sub_wire0[23:0];

	mult_12_altsquare	mult_12_altsquare_component (
				.clock (clock),
				.data (dataa),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AutoSizeResult NUMERIC "1"
// Retrieval info: PRIVATE: B_isConstant NUMERIC "0"
// Retrieval info: PRIVATE: ConstantB NUMERIC "0"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: PRIVATE: LPM_PIPELINE NUMERIC "2"
// Retrieval info: PRIVATE: Latency NUMERIC "1"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: SignedMult NUMERIC "1"
// Retrieval info: PRIVATE: USE_MULT NUMERIC "0"
// Retrieval info: PRIVATE: ValidConstant NUMERIC "0"
// Retrieval info: PRIVATE: WidthA NUMERIC "12"
// Retrieval info: PRIVATE: WidthB NUMERIC "8"
// Retrieval info: PRIVATE: WidthP NUMERIC "24"
// Retrieval info: PRIVATE: aclr NUMERIC "0"
// Retrieval info: PRIVATE: clken NUMERIC "0"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: PRIVATE: optimize NUMERIC "0"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: DATA_WIDTH NUMERIC "12"
// Retrieval info: CONSTANT: LPM_TYPE STRING "ALTSQUARE"
// Retrieval info: CONSTANT: PIPELINE NUMERIC "2"
// Retrieval info: CONSTANT: REPRESENTATION STRING "SIGNED"
// Retrieval info: CONSTANT: RESULT_WIDTH NUMERIC "24"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: dataa 0 0 12 0 INPUT NODEFVAL "dataa[11..0]"
// Retrieval info: USED_PORT: result 0 0 24 0 OUTPUT NODEFVAL "result[23..0]"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @data 0 0 12 0 dataa 0 0 12 0
// Retrieval info: CONNECT: result 0 0 24 0 @result 0 0 24 0
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_12.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_12.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_12.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_12.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_12_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_12_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_12_syn.v TRUE
