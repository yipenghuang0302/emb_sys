// megafunction wizard: %LPM_ADD_SUB%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: LPM_ADD_SUB 

// ============================================================
// File Name: adder_24.v
// Megafunction Name(s):
// 			LPM_ADD_SUB
//
// Simulation Library Files(s):
// 			
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 13.1.3 Build 178 02/12/2014 SJ Web Edition
// ************************************************************


//Copyright (C) 1991-2014 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=2 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=24 ONE_INPUT_IS_CONSTANT="NO" add_sub clock dataa datab result
//VERSION_BEGIN 13.1 cbx_cycloneii 2014:02:12:20:59:46:SJ cbx_lpm_add_sub 2014:02:12:20:59:46:SJ cbx_mgl 2014:02:12:21:04:28:SJ cbx_stratix 2014:02:12:20:59:46:SJ cbx_stratixii 2014:02:12:20:59:46:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = lut 50 reg 50 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  adder_24_add_sub
	( 
	add_sub,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   add_sub;
	input   clock;
	input   [23:0]  dataa;
	input   [23:0]  datab;
	output   [23:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   add_sub;
	tri0   clock;
	tri0   [23:0]  dataa;
	tri0   [23:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[23:0]	add_sub_cell_ffa;
	reg	[0:0]	add_sub_regra0;
	reg	[0:0]	inter_regrs_cin_ffa0;
	reg	[23:0]	pad_cell_ffa;
	wire  [0:0]   wire_add_sub_cella_0cout;
	wire  [0:0]   wire_add_sub_cella_1cout;
	wire  [0:0]   wire_add_sub_cella_2cout;
	wire  [0:0]   wire_add_sub_cella_3cout;
	wire  [0:0]   wire_add_sub_cella_4cout;
	wire  [0:0]   wire_add_sub_cella_5cout;
	wire  [0:0]   wire_add_sub_cella_6cout;
	wire  [0:0]   wire_add_sub_cella_7cout;
	wire  [0:0]   wire_add_sub_cella_8cout;
	wire  [0:0]   wire_add_sub_cella_9cout;
	wire  [0:0]   wire_add_sub_cella_10cout;
	wire  [0:0]   wire_add_sub_cella_11cout;
	wire  [0:0]   wire_add_sub_cella_12cout;
	wire  [0:0]   wire_add_sub_cella_13cout;
	wire  [0:0]   wire_add_sub_cella_14cout;
	wire  [0:0]   wire_add_sub_cella_15cout;
	wire  [0:0]   wire_add_sub_cella_16cout;
	wire  [0:0]   wire_add_sub_cella_17cout;
	wire  [0:0]   wire_add_sub_cella_18cout;
	wire  [0:0]   wire_add_sub_cella_19cout;
	wire  [0:0]   wire_add_sub_cella_20cout;
	wire  [0:0]   wire_add_sub_cella_21cout;
	wire  [0:0]   wire_add_sub_cella_22cout;
	wire  [23:0]   wire_add_sub_cella_datad;
	wire  [23:0]   wire_add_sub_cella_dataf;
	wire  [23:0]   wire_add_sub_cella_sumout;
	wire  [0:0]   wire_inter_regrs_cina_sumout;
	wire  [0:0]   wire_inter_regrs_couta_0cout;
	wire  [0:0]   wire_pad_cella_0cout;
	wire  [0:0]   wire_pad_cella_1cout;
	wire  [0:0]   wire_pad_cella_2cout;
	wire  [0:0]   wire_pad_cella_3cout;
	wire  [0:0]   wire_pad_cella_4cout;
	wire  [0:0]   wire_pad_cella_5cout;
	wire  [0:0]   wire_pad_cella_6cout;
	wire  [0:0]   wire_pad_cella_7cout;
	wire  [0:0]   wire_pad_cella_8cout;
	wire  [0:0]   wire_pad_cella_9cout;
	wire  [0:0]   wire_pad_cella_10cout;
	wire  [0:0]   wire_pad_cella_12cout;
	wire  [0:0]   wire_pad_cella_13cout;
	wire  [0:0]   wire_pad_cella_14cout;
	wire  [0:0]   wire_pad_cella_15cout;
	wire  [0:0]   wire_pad_cella_16cout;
	wire  [0:0]   wire_pad_cella_17cout;
	wire  [0:0]   wire_pad_cella_18cout;
	wire  [0:0]   wire_pad_cella_19cout;
	wire  [0:0]   wire_pad_cella_20cout;
	wire  [0:0]   wire_pad_cella_21cout;
	wire  [0:0]   wire_pad_cella_22cout;
	wire  [23:0]   wire_pad_cella_datad;
	wire  [23:0]   wire_pad_cella_sumout;

	// synopsys translate_off
	initial
		add_sub_cell_ffa = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		  add_sub_cell_ffa <= wire_add_sub_cella_sumout;
	// synopsys translate_off
	initial
		add_sub_regra0 = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		  add_sub_regra0 <= (~ add_sub);
	// synopsys translate_off
	initial
		inter_regrs_cin_ffa0 = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		  inter_regrs_cin_ffa0 <= wire_inter_regrs_cina_sumout[0:0];
	// synopsys translate_off
	initial
		pad_cell_ffa = 0;
	// synopsys translate_on
	always @ ( posedge clock)
		  pad_cell_ffa <= wire_pad_cella_sumout;
	cyclonev_lcell_comb   add_sub_cella_0
	( 
	.cin((~ add_sub)),
	.combout(),
	.cout(wire_add_sub_cella_0cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[0:0]),
	.dataf(wire_add_sub_cella_dataf[0:0]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_0.extended_lut = "off",
		add_sub_cella_0.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_0.shared_arith = "off",
		add_sub_cella_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_1
	( 
	.cin(wire_add_sub_cella_0cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_1cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[1:1]),
	.dataf(wire_add_sub_cella_dataf[1:1]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[1:1]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_1.extended_lut = "off",
		add_sub_cella_1.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_1.shared_arith = "off",
		add_sub_cella_1.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_2
	( 
	.cin(wire_add_sub_cella_1cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_2cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[2:2]),
	.dataf(wire_add_sub_cella_dataf[2:2]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[2:2]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_2.extended_lut = "off",
		add_sub_cella_2.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_2.shared_arith = "off",
		add_sub_cella_2.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_3
	( 
	.cin(wire_add_sub_cella_2cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_3cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[3:3]),
	.dataf(wire_add_sub_cella_dataf[3:3]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[3:3]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_3.extended_lut = "off",
		add_sub_cella_3.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_3.shared_arith = "off",
		add_sub_cella_3.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_4
	( 
	.cin(wire_add_sub_cella_3cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_4cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[4:4]),
	.dataf(wire_add_sub_cella_dataf[4:4]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[4:4]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_4.extended_lut = "off",
		add_sub_cella_4.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_4.shared_arith = "off",
		add_sub_cella_4.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_5
	( 
	.cin(wire_add_sub_cella_4cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_5cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[5:5]),
	.dataf(wire_add_sub_cella_dataf[5:5]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[5:5]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_5.extended_lut = "off",
		add_sub_cella_5.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_5.shared_arith = "off",
		add_sub_cella_5.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_6
	( 
	.cin(wire_add_sub_cella_5cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_6cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[6:6]),
	.dataf(wire_add_sub_cella_dataf[6:6]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[6:6]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_6.extended_lut = "off",
		add_sub_cella_6.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_6.shared_arith = "off",
		add_sub_cella_6.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_7
	( 
	.cin(wire_add_sub_cella_6cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_7cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[7:7]),
	.dataf(wire_add_sub_cella_dataf[7:7]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[7:7]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_7.extended_lut = "off",
		add_sub_cella_7.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_7.shared_arith = "off",
		add_sub_cella_7.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_8
	( 
	.cin(wire_add_sub_cella_7cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_8cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[8:8]),
	.dataf(wire_add_sub_cella_dataf[8:8]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[8:8]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_8.extended_lut = "off",
		add_sub_cella_8.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_8.shared_arith = "off",
		add_sub_cella_8.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_9
	( 
	.cin(wire_add_sub_cella_8cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_9cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[9:9]),
	.dataf(wire_add_sub_cella_dataf[9:9]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[9:9]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_9.extended_lut = "off",
		add_sub_cella_9.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_9.shared_arith = "off",
		add_sub_cella_9.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_10
	( 
	.cin(wire_add_sub_cella_9cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_10cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[10:10]),
	.dataf(wire_add_sub_cella_dataf[10:10]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[10:10]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_10.extended_lut = "off",
		add_sub_cella_10.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_10.shared_arith = "off",
		add_sub_cella_10.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_11
	( 
	.cin(wire_add_sub_cella_10cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_11cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[11:11]),
	.dataf(wire_add_sub_cella_dataf[11:11]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[11:11]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_11.extended_lut = "off",
		add_sub_cella_11.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_11.shared_arith = "off",
		add_sub_cella_11.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_12
	( 
	.cin((~ add_sub)),
	.combout(),
	.cout(wire_add_sub_cella_12cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[12:12]),
	.dataf(wire_add_sub_cella_dataf[12:12]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[12:12]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_12.extended_lut = "off",
		add_sub_cella_12.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_12.shared_arith = "off",
		add_sub_cella_12.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_13
	( 
	.cin(wire_add_sub_cella_12cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_13cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[13:13]),
	.dataf(wire_add_sub_cella_dataf[13:13]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[13:13]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_13.extended_lut = "off",
		add_sub_cella_13.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_13.shared_arith = "off",
		add_sub_cella_13.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_14
	( 
	.cin(wire_add_sub_cella_13cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_14cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[14:14]),
	.dataf(wire_add_sub_cella_dataf[14:14]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[14:14]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_14.extended_lut = "off",
		add_sub_cella_14.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_14.shared_arith = "off",
		add_sub_cella_14.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_15
	( 
	.cin(wire_add_sub_cella_14cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_15cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[15:15]),
	.dataf(wire_add_sub_cella_dataf[15:15]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[15:15]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_15.extended_lut = "off",
		add_sub_cella_15.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_15.shared_arith = "off",
		add_sub_cella_15.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_16
	( 
	.cin(wire_add_sub_cella_15cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_16cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[16:16]),
	.dataf(wire_add_sub_cella_dataf[16:16]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[16:16]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_16.extended_lut = "off",
		add_sub_cella_16.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_16.shared_arith = "off",
		add_sub_cella_16.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_17
	( 
	.cin(wire_add_sub_cella_16cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_17cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[17:17]),
	.dataf(wire_add_sub_cella_dataf[17:17]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[17:17]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_17.extended_lut = "off",
		add_sub_cella_17.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_17.shared_arith = "off",
		add_sub_cella_17.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_18
	( 
	.cin(wire_add_sub_cella_17cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_18cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[18:18]),
	.dataf(wire_add_sub_cella_dataf[18:18]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[18:18]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_18.extended_lut = "off",
		add_sub_cella_18.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_18.shared_arith = "off",
		add_sub_cella_18.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_19
	( 
	.cin(wire_add_sub_cella_18cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_19cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[19:19]),
	.dataf(wire_add_sub_cella_dataf[19:19]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[19:19]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_19.extended_lut = "off",
		add_sub_cella_19.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_19.shared_arith = "off",
		add_sub_cella_19.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_20
	( 
	.cin(wire_add_sub_cella_19cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_20cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[20:20]),
	.dataf(wire_add_sub_cella_dataf[20:20]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[20:20]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_20.extended_lut = "off",
		add_sub_cella_20.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_20.shared_arith = "off",
		add_sub_cella_20.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_21
	( 
	.cin(wire_add_sub_cella_20cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_21cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[21:21]),
	.dataf(wire_add_sub_cella_dataf[21:21]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[21:21]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_21.extended_lut = "off",
		add_sub_cella_21.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_21.shared_arith = "off",
		add_sub_cella_21.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_22
	( 
	.cin(wire_add_sub_cella_21cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_22cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[22:22]),
	.dataf(wire_add_sub_cella_dataf[22:22]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[22:22]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_22.extended_lut = "off",
		add_sub_cella_22.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_22.shared_arith = "off",
		add_sub_cella_22.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_23
	( 
	.cin(wire_add_sub_cella_22cout[0:0]),
	.combout(),
	.cout(),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[23:23]),
	.dataf(wire_add_sub_cella_dataf[23:23]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[23:23]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_23.extended_lut = "off",
		add_sub_cella_23.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_23.shared_arith = "off",
		add_sub_cella_23.lpm_type = "cyclonev_lcell_comb";
	assign
		wire_add_sub_cella_datad = dataa,
		wire_add_sub_cella_dataf = datab;
	cyclonev_lcell_comb   inter_regrs_cina_0
	( 
	.cin(wire_add_sub_cella_11cout[0:0]),
	.combout(),
	.cout(),
	.dataa(1'b1),
	.shareout(),
	.sumout(wire_inter_regrs_cina_sumout[0:0]),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		inter_regrs_cina_0.extended_lut = "off",
		inter_regrs_cina_0.lut_mask = 64'h0000AAAA00005555,
		inter_regrs_cina_0.shared_arith = "off",
		inter_regrs_cina_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   inter_regrs_couta_0
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_inter_regrs_couta_0cout[0:0]),
	.dataa(inter_regrs_cin_ffa0),
	.shareout(),
	.sumout(),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		inter_regrs_couta_0.extended_lut = "off",
		inter_regrs_couta_0.lut_mask = 64'h000055550000AAAA,
		inter_regrs_couta_0.shared_arith = "off",
		inter_regrs_couta_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_0
	( 
	.cin(add_sub_regra0),
	.combout(),
	.cout(wire_pad_cella_0cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[0:0]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_0.extended_lut = "off",
		pad_cella_0.lut_mask = 64'h00000FF00000FF00,
		pad_cella_0.shared_arith = "off",
		pad_cella_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_1
	( 
	.cin(wire_pad_cella_0cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_1cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[1:1]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[1:1]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_1.extended_lut = "off",
		pad_cella_1.lut_mask = 64'h00000FF00000FF00,
		pad_cella_1.shared_arith = "off",
		pad_cella_1.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_2
	( 
	.cin(wire_pad_cella_1cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_2cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[2:2]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[2:2]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_2.extended_lut = "off",
		pad_cella_2.lut_mask = 64'h00000FF00000FF00,
		pad_cella_2.shared_arith = "off",
		pad_cella_2.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_3
	( 
	.cin(wire_pad_cella_2cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_3cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[3:3]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[3:3]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_3.extended_lut = "off",
		pad_cella_3.lut_mask = 64'h00000FF00000FF00,
		pad_cella_3.shared_arith = "off",
		pad_cella_3.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_4
	( 
	.cin(wire_pad_cella_3cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_4cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[4:4]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[4:4]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_4.extended_lut = "off",
		pad_cella_4.lut_mask = 64'h00000FF00000FF00,
		pad_cella_4.shared_arith = "off",
		pad_cella_4.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_5
	( 
	.cin(wire_pad_cella_4cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_5cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[5:5]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[5:5]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_5.extended_lut = "off",
		pad_cella_5.lut_mask = 64'h00000FF00000FF00,
		pad_cella_5.shared_arith = "off",
		pad_cella_5.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_6
	( 
	.cin(wire_pad_cella_5cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_6cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[6:6]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[6:6]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_6.extended_lut = "off",
		pad_cella_6.lut_mask = 64'h00000FF00000FF00,
		pad_cella_6.shared_arith = "off",
		pad_cella_6.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_7
	( 
	.cin(wire_pad_cella_6cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_7cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[7:7]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[7:7]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_7.extended_lut = "off",
		pad_cella_7.lut_mask = 64'h00000FF00000FF00,
		pad_cella_7.shared_arith = "off",
		pad_cella_7.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_8
	( 
	.cin(wire_pad_cella_7cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_8cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[8:8]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[8:8]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_8.extended_lut = "off",
		pad_cella_8.lut_mask = 64'h00000FF00000FF00,
		pad_cella_8.shared_arith = "off",
		pad_cella_8.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_9
	( 
	.cin(wire_pad_cella_8cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_9cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[9:9]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[9:9]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_9.extended_lut = "off",
		pad_cella_9.lut_mask = 64'h00000FF00000FF00,
		pad_cella_9.shared_arith = "off",
		pad_cella_9.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_10
	( 
	.cin(wire_pad_cella_9cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_10cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[10:10]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[10:10]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_10.extended_lut = "off",
		pad_cella_10.lut_mask = 64'h00000FF00000FF00,
		pad_cella_10.shared_arith = "off",
		pad_cella_10.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_11
	( 
	.cin(wire_pad_cella_10cout[0:0]),
	.combout(),
	.cout(),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[11:11]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[11:11]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_11.extended_lut = "off",
		pad_cella_11.lut_mask = 64'h00000FF00000FF00,
		pad_cella_11.shared_arith = "off",
		pad_cella_11.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_12
	( 
	.cin(wire_inter_regrs_couta_0cout),
	.combout(),
	.cout(wire_pad_cella_12cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[12:12]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[12:12]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_12.extended_lut = "off",
		pad_cella_12.lut_mask = 64'h00000FF00000FF00,
		pad_cella_12.shared_arith = "off",
		pad_cella_12.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_13
	( 
	.cin(wire_pad_cella_12cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_13cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[13:13]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[13:13]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_13.extended_lut = "off",
		pad_cella_13.lut_mask = 64'h00000FF00000FF00,
		pad_cella_13.shared_arith = "off",
		pad_cella_13.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_14
	( 
	.cin(wire_pad_cella_13cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_14cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[14:14]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[14:14]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_14.extended_lut = "off",
		pad_cella_14.lut_mask = 64'h00000FF00000FF00,
		pad_cella_14.shared_arith = "off",
		pad_cella_14.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_15
	( 
	.cin(wire_pad_cella_14cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_15cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[15:15]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[15:15]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_15.extended_lut = "off",
		pad_cella_15.lut_mask = 64'h00000FF00000FF00,
		pad_cella_15.shared_arith = "off",
		pad_cella_15.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_16
	( 
	.cin(wire_pad_cella_15cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_16cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[16:16]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[16:16]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_16.extended_lut = "off",
		pad_cella_16.lut_mask = 64'h00000FF00000FF00,
		pad_cella_16.shared_arith = "off",
		pad_cella_16.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_17
	( 
	.cin(wire_pad_cella_16cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_17cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[17:17]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[17:17]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_17.extended_lut = "off",
		pad_cella_17.lut_mask = 64'h00000FF00000FF00,
		pad_cella_17.shared_arith = "off",
		pad_cella_17.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_18
	( 
	.cin(wire_pad_cella_17cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_18cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[18:18]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[18:18]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_18.extended_lut = "off",
		pad_cella_18.lut_mask = 64'h00000FF00000FF00,
		pad_cella_18.shared_arith = "off",
		pad_cella_18.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_19
	( 
	.cin(wire_pad_cella_18cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_19cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[19:19]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[19:19]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_19.extended_lut = "off",
		pad_cella_19.lut_mask = 64'h00000FF00000FF00,
		pad_cella_19.shared_arith = "off",
		pad_cella_19.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_20
	( 
	.cin(wire_pad_cella_19cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_20cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[20:20]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[20:20]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_20.extended_lut = "off",
		pad_cella_20.lut_mask = 64'h00000FF00000FF00,
		pad_cella_20.shared_arith = "off",
		pad_cella_20.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_21
	( 
	.cin(wire_pad_cella_20cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_21cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[21:21]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[21:21]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_21.extended_lut = "off",
		pad_cella_21.lut_mask = 64'h00000FF00000FF00,
		pad_cella_21.shared_arith = "off",
		pad_cella_21.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_22
	( 
	.cin(wire_pad_cella_21cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_22cout[0:0]),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[22:22]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[22:22]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_22.extended_lut = "off",
		pad_cella_22.lut_mask = 64'h00000FF00000FF00,
		pad_cella_22.shared_arith = "off",
		pad_cella_22.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_23
	( 
	.cin(wire_pad_cella_22cout[0:0]),
	.combout(),
	.cout(),
	.datac((~ add_sub_regra0)),
	.datad(wire_pad_cella_datad[23:23]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[23:23]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_23.extended_lut = "off",
		pad_cella_23.lut_mask = 64'h00000FF00000FF00,
		pad_cella_23.shared_arith = "off",
		pad_cella_23.lpm_type = "cyclonev_lcell_comb";
	assign
		wire_pad_cella_datad = {add_sub_cell_ffa};
	assign
		result = pad_cell_ffa[23:0];
endmodule //adder_24_add_sub
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module adder_24 (
	add_sub,
	clock,
	dataa,
	datab,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	  add_sub;
	input	  clock;
	input	[23:0]  dataa;
	input	[23:0]  datab;
	output	[23:0]  result;

	wire [23:0] sub_wire0;
	wire [23:0] result = sub_wire0[23:0];

	adder_24_add_sub	adder_24_add_sub_component (
				.add_sub (add_sub),
				.clock (clock),
				.datab (datab),
				.dataa (dataa),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: CarryIn NUMERIC "0"
// Retrieval info: PRIVATE: CarryOut NUMERIC "0"
// Retrieval info: PRIVATE: ConstantA NUMERIC "0"
// Retrieval info: PRIVATE: ConstantB NUMERIC "0"
// Retrieval info: PRIVATE: Function NUMERIC "2"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: PRIVATE: LPM_PIPELINE NUMERIC "2"
// Retrieval info: PRIVATE: Latency NUMERIC "1"
// Retrieval info: PRIVATE: Overflow NUMERIC "0"
// Retrieval info: PRIVATE: RadixA NUMERIC "10"
// Retrieval info: PRIVATE: RadixB NUMERIC "10"
// Retrieval info: PRIVATE: Representation NUMERIC "0"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: ValidCtA NUMERIC "0"
// Retrieval info: PRIVATE: ValidCtB NUMERIC "0"
// Retrieval info: PRIVATE: WhichConstant NUMERIC "0"
// Retrieval info: PRIVATE: aclr NUMERIC "0"
// Retrieval info: PRIVATE: clken NUMERIC "0"
// Retrieval info: PRIVATE: nBit NUMERIC "24"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_DIRECTION STRING "UNUSED"
// Retrieval info: CONSTANT: LPM_HINT STRING "ONE_INPUT_IS_CONSTANT=NO,CIN_USED=NO"
// Retrieval info: CONSTANT: LPM_PIPELINE NUMERIC "2"
// Retrieval info: CONSTANT: LPM_REPRESENTATION STRING "SIGNED"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_ADD_SUB"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "24"
// Retrieval info: USED_PORT: add_sub 0 0 0 0 INPUT NODEFVAL "add_sub"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: dataa 0 0 24 0 INPUT NODEFVAL "dataa[23..0]"
// Retrieval info: USED_PORT: datab 0 0 24 0 INPUT NODEFVAL "datab[23..0]"
// Retrieval info: USED_PORT: result 0 0 24 0 OUTPUT NODEFVAL "result[23..0]"
// Retrieval info: CONNECT: @add_sub 0 0 0 0 add_sub 0 0 0 0
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @dataa 0 0 24 0 dataa 0 0 24 0
// Retrieval info: CONNECT: @datab 0 0 24 0 datab 0 0 24 0
// Retrieval info: CONNECT: result 0 0 24 0 @result 0 0 24 0
// Retrieval info: GEN_FILE: TYPE_NORMAL adder_24.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL adder_24.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL adder_24.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL adder_24.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL adder_24_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL adder_24_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL adder_24_syn.v TRUE
